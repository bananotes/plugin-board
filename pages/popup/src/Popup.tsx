// part of the code generated by chatgpt
import React, { useEffect, useState } from 'react';
import { useStorage, withErrorBoundary, withSuspense } from '@extension/shared';
import { exampleThemeStorage, popupSettingsStorage } from '@extension/storage';

const notificationOptions = {
  type: 'basic',
  iconUrl: chrome.runtime.getURL('icon-34.png'),
  title: 'Injecting new note error',
  message: 'You cannot inject new note here!',
} as const;

const injectNewNote = async () => {
  // TODO: login
  const [tab] = await chrome.tabs.query({ currentWindow: true, active: true });

  if (tab.url!.startsWith('about:') || tab.url!.startsWith('chrome:')) {
    chrome.notifications.create('inject-error', notificationOptions);
  }

  await chrome.scripting
    .executeScript({
      target: { tabId: tab.id! },
      files: ['/content-runtime/index.iife.js'],
    })
    .then(() => {
      window.close();
    })
    .catch(err => {
      // Handling errors related to other paths
      if (err.message.includes('Cannot access a chrome:// URL')) {
        chrome.notifications.create('inject-error', notificationOptions);
      }
    });
};

const Popup = () => {
  const theme = useStorage(exampleThemeStorage);
  const popupSettings = useStorage(popupSettingsStorage);
  const isLight = theme === 'light';
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  useEffect(() => {
    console.log(popupSettings.progress);
  }, []);

  const handleAddClick = () => {
    console.log('Add button clicked');
    injectNewNote();
  };

  const handleSwitchClick = () => {
    console.log('Switch button clicked');
    popupSettingsStorage.setIsMultiUser(!popupSettings.isMultiUser);
  };

  const handleProgressEnd = () => {
    console.log(popupSettings.progress);
  };

  const handleLoginClick = () => {
    setIsLoggedIn(!isLoggedIn);
  };

  const handleProgressChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newProgress = parseInt(event.target.value);
    updateProgress(newProgress);
  };

  const updateProgress = (newProgress: number) => {
    popupSettingsStorage.setProgress(Math.min(100, Math.max(0, newProgress)));
  };

  return (
    <div className={`App absolute inset-0 flex flex-col overflow-hidden ${isLight ? 'bg-amber-50' : 'bg-gray-800'}`}>
      <div className="flex justify-between items-center px-4 py-2 bg-yellow-100 border-b border-[#ffdd79] h-8">
        <div className="flex items-center space-x-4">
          <button
            onClick={handleAddClick}
            className="text-yellow-900 hover:text-yellow-600 transition-colors text-2xl font-light focus:outline-none">
            +
          </button>
        </div>
        <div className="flex items-center text-sm">
          <span className={`mr-1 ${!popupSettings.isMultiUser ? 'font-bold' : ''} text-yellow-900`}>My Notes</span>
          <label className="relative inline-block w-10 h-6 mx-1">
            <input
              type="checkbox"
              className="opacity-0 w-0 h-0 peer"
              checked={popupSettings.isMultiUser}
              onChange={handleSwitchClick}
            />
            <span className="absolute cursor-pointer inset-0 bg-[#ffc107] rounded-full before:absolute before:content-[''] before:h-5 before:w-5 before:left-0.5 before:bottom-0.5 before:bg-white before:rounded-full before:transition-transform before:duration-300 before:ease-in-out peer-checked:bg-[#8b4513] peer-checked:before:transform peer-checked:before:translate-x-4"></span>
          </label>
          <span className={`ml-1 ${popupSettings.isMultiUser ? 'font-bold' : ''} text-yellow-900`}>All Notes</span>
        </div>
        <div>
          {isLoggedIn ? (
            <div className="w-6 h-6 rounded-full bg-gray-300 flex items-center justify-center text-lg">ðŸ‘®</div>
          ) : (
            <button
              onClick={handleLoginClick}
              className="text-yellow-900 hover:text-yellow-600 transition-colors text-sm font-medium tracking-wide focus:outline-none">
              Login
            </button>
          )}
        </div>
      </div>

      {popupSettings.isMultiUser && (
        <div className="flex flex-col items-center px-4 py-2 bg-amber-50 border-b border-[#e0b84d]">
          <div className="flex items-center w-full">
            <input
              type="range"
              min="0"
              max="100"
              value={popupSettings.progress}
              onChange={handleProgressChange}
              onMouseUp={handleProgressEnd}
              className="w-full h-1 bg-orange-200 rounded-full appearance-none outline-none opacity-70 hover:opacity-100 transition-opacity"
            />
            <span className="ml-2 text-xs text-yellow-900 min-w-[40px] text-right">{popupSettings.progress}%</span>
          </div>
          <div className="mt-1 text-xs text-yellow-900">Density</div>
        </div>
      )}

      <div className="flex-grow p-5 bg-amber-50"></div>
    </div>
  );
};

export default withErrorBoundary(withSuspense(Popup, <div> Loading ... </div>), <div> Error Occur </div>);
