// tslint:disable
/**
 * Bananotes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineObject4 } from '../models';
// @ts-ignore
import { InlineObject5 } from '../models';
// @ts-ignore
import { InlineObject6 } from '../models';
// @ts-ignore
import { InlineObject7 } from '../models';
// @ts-ignore
import { InlineObject8 } from '../models';
// @ts-ignore
import { InlineObject9 } from '../models';
// @ts-ignore
import { InlineResponse2005 } from '../models';
// @ts-ignore
import { InlineResponse2006 } from '../models';
// @ts-ignore
import { InlineResponse404 } from '../models';
/**
 * EntryInteractionsApi - axios parameter creator
 * @export
 */
export const EntryInteractionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Dislike the specified note and increase crease the number of dislikes. If the note does not exist, return an error message.
     * @summary Dislike Entry
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryDislikePost: async (inlineObject5?: InlineObject5, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry/dislike`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject5 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {})
        : inlineObject5 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Add the note to the invisibleEntries list of the current user, and the user will no longer see the note. If the note does not exist or is already in the invisible list, an error message is returned.
     * @summary Hide Entry
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryInvisiblePost: async (inlineObject8?: InlineObject8, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry/invisible`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject8 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject8 !== undefined ? inlineObject8 : {})
        : inlineObject8 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Like the specified note and increase the number of likes. If the note does not exist, return an error message.
     * @summary Like Entry
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryLikePost: async (inlineObject4?: InlineObject4, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry/like`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject4 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {})
        : inlineObject4 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Undislike the specified note and decrease crease the number of dislikes. If the note does not exist, return an error message.
     * @summary Undislike Entry
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryUndislikePost: async (inlineObject7?: InlineObject7, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry/undislike`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject7 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {})
        : inlineObject7 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Unlike the specified note and decrease the number of likes. If the note does not exist, return an error message.
     * @summary Unlike Entry
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryUnlikePost: async (inlineObject6?: InlineObject6, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry/unlike`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject6 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {})
        : inlineObject6 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Remove the note from invisibleEntries list of the current user, and the user will see the note. If the note does not exist, an error message is returned.
     * @summary Show Hided Entry
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryVisiblePost: async (inlineObject9?: InlineObject9, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry/visible`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject9 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject9 !== undefined ? inlineObject9 : {})
        : inlineObject9 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EntryInteractionsApi - functional programming interface
 * @export
 */
export const EntryInteractionsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Dislike the specified note and increase crease the number of dislikes. If the note does not exist, return an error message.
     * @summary Dislike Entry
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryDislikePost(
      inlineObject5?: InlineObject5,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
      const localVarAxiosArgs = await EntryInteractionsApiAxiosParamCreator(configuration).entryDislikePost(
        inlineObject5,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Add the note to the invisibleEntries list of the current user, and the user will no longer see the note. If the note does not exist or is already in the invisible list, an error message is returned.
     * @summary Hide Entry
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryInvisiblePost(
      inlineObject8?: InlineObject8,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await EntryInteractionsApiAxiosParamCreator(configuration).entryInvisiblePost(
        inlineObject8,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Like the specified note and increase the number of likes. If the note does not exist, return an error message.
     * @summary Like Entry
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryLikePost(
      inlineObject4?: InlineObject4,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
      const localVarAxiosArgs = await EntryInteractionsApiAxiosParamCreator(configuration).entryLikePost(
        inlineObject4,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Undislike the specified note and decrease crease the number of dislikes. If the note does not exist, return an error message.
     * @summary Undislike Entry
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryUndislikePost(
      inlineObject7?: InlineObject7,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
      const localVarAxiosArgs = await EntryInteractionsApiAxiosParamCreator(configuration).entryUndislikePost(
        inlineObject7,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Unlike the specified note and decrease the number of likes. If the note does not exist, return an error message.
     * @summary Unlike Entry
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryUnlikePost(
      inlineObject6?: InlineObject6,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
      const localVarAxiosArgs = await EntryInteractionsApiAxiosParamCreator(configuration).entryUnlikePost(
        inlineObject6,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Remove the note from invisibleEntries list of the current user, and the user will see the note. If the note does not exist, an error message is returned.
     * @summary Show Hided Entry
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryVisiblePost(
      inlineObject9?: InlineObject9,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await EntryInteractionsApiAxiosParamCreator(configuration).entryVisiblePost(
        inlineObject9,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * EntryInteractionsApi - factory interface
 * @export
 */
export const EntryInteractionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * Dislike the specified note and increase crease the number of dislikes. If the note does not exist, return an error message.
     * @summary Dislike Entry
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryDislikePost(inlineObject5?: InlineObject5, options?: any): AxiosPromise<InlineResponse2006> {
      return EntryInteractionsApiFp(configuration)
        .entryDislikePost(inlineObject5, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Add the note to the invisibleEntries list of the current user, and the user will no longer see the note. If the note does not exist or is already in the invisible list, an error message is returned.
     * @summary Hide Entry
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryInvisiblePost(inlineObject8?: InlineObject8, options?: any): AxiosPromise<object> {
      return EntryInteractionsApiFp(configuration)
        .entryInvisiblePost(inlineObject8, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Like the specified note and increase the number of likes. If the note does not exist, return an error message.
     * @summary Like Entry
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryLikePost(inlineObject4?: InlineObject4, options?: any): AxiosPromise<InlineResponse2005> {
      return EntryInteractionsApiFp(configuration)
        .entryLikePost(inlineObject4, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Undislike the specified note and decrease crease the number of dislikes. If the note does not exist, return an error message.
     * @summary Undislike Entry
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryUndislikePost(inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse2006> {
      return EntryInteractionsApiFp(configuration)
        .entryUndislikePost(inlineObject7, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Unlike the specified note and decrease the number of likes. If the note does not exist, return an error message.
     * @summary Unlike Entry
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryUnlikePost(inlineObject6?: InlineObject6, options?: any): AxiosPromise<InlineResponse2005> {
      return EntryInteractionsApiFp(configuration)
        .entryUnlikePost(inlineObject6, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Remove the note from invisibleEntries list of the current user, and the user will see the note. If the note does not exist, an error message is returned.
     * @summary Show Hided Entry
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryVisiblePost(inlineObject9?: InlineObject9, options?: any): AxiosPromise<object> {
      return EntryInteractionsApiFp(configuration)
        .entryVisiblePost(inlineObject9, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * EntryInteractionsApi - object-oriented interface
 * @export
 * @class EntryInteractionsApi
 * @extends {BaseAPI}
 */
export class EntryInteractionsApi extends BaseAPI {
  /**
   * Dislike the specified note and increase crease the number of dislikes. If the note does not exist, return an error message.
   * @summary Dislike Entry
   * @param {InlineObject5} [inlineObject5]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryInteractionsApi
   */
  public entryDislikePost(inlineObject5?: InlineObject5, options?: any) {
    return EntryInteractionsApiFp(this.configuration)
      .entryDislikePost(inlineObject5, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Add the note to the invisibleEntries list of the current user, and the user will no longer see the note. If the note does not exist or is already in the invisible list, an error message is returned.
   * @summary Hide Entry
   * @param {InlineObject8} [inlineObject8]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryInteractionsApi
   */
  public entryInvisiblePost(inlineObject8?: InlineObject8, options?: any) {
    return EntryInteractionsApiFp(this.configuration)
      .entryInvisiblePost(inlineObject8, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Like the specified note and increase the number of likes. If the note does not exist, return an error message.
   * @summary Like Entry
   * @param {InlineObject4} [inlineObject4]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryInteractionsApi
   */
  public entryLikePost(inlineObject4?: InlineObject4, options?: any) {
    return EntryInteractionsApiFp(this.configuration)
      .entryLikePost(inlineObject4, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Undislike the specified note and decrease crease the number of dislikes. If the note does not exist, return an error message.
   * @summary Undislike Entry
   * @param {InlineObject7} [inlineObject7]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryInteractionsApi
   */
  public entryUndislikePost(inlineObject7?: InlineObject7, options?: any) {
    return EntryInteractionsApiFp(this.configuration)
      .entryUndislikePost(inlineObject7, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Unlike the specified note and decrease the number of likes. If the note does not exist, return an error message.
   * @summary Unlike Entry
   * @param {InlineObject6} [inlineObject6]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryInteractionsApi
   */
  public entryUnlikePost(inlineObject6?: InlineObject6, options?: any) {
    return EntryInteractionsApiFp(this.configuration)
      .entryUnlikePost(inlineObject6, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Remove the note from invisibleEntries list of the current user, and the user will see the note. If the note does not exist, an error message is returned.
   * @summary Show Hided Entry
   * @param {InlineObject9} [inlineObject9]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryInteractionsApi
   */
  public entryVisiblePost(inlineObject9?: InlineObject9, options?: any) {
    return EntryInteractionsApiFp(this.configuration)
      .entryVisiblePost(inlineObject9, options)
      .then(request => request(this.axios, this.basePath));
  }
}
