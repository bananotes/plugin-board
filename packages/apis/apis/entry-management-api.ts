// tslint:disable
/**
 * Bananotes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineObject1 } from '../models';
// @ts-ignore
import { InlineObject2 } from '../models';
// @ts-ignore
import { InlineObject3 } from '../models';
// @ts-ignore
import { InlineResponse2003 } from '../models';
// @ts-ignore
import { InlineResponse2004 } from '../models';
// @ts-ignore
import { InlineResponse404 } from '../models';
/**
 * EntryManagementApi - axios parameter creator
 * @export
 */
export const EntryManagementApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * read entries no params: entries created by current user only author: entries created by the author only url: entries related to the url author and url: entries related to the url and created by the author  get user self notes related to a url: userid as author, and url
     * @summary Read Entries
     * @param {string} [url]
     * @param {string} [author]
     * @param {number} [density]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entriesGet: async (url?: string, author?: string, density?: number, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entries`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (url !== undefined) {
        localVarQueryParameter['url'] = url;
      }

      if (author !== undefined) {
        localVarQueryParameter['author'] = author;
      }

      if (density !== undefined) {
        localVarQueryParameter['density'] = density;
      }

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Deletes the specified note logically and sets the note\'s isDeleted field to true. If the note does not exist, returns an error message.
     * @summary Delete Entry
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryDelete: async (inlineObject3?: InlineObject3, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject3 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {})
        : inlineObject3 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a new note.  The request body should contain: author:userId content: position: x and y size: w and h url.  If the creation is successful, the detailed information of the note is returned.
     * @summary Create a new sticker
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryPost: async (inlineObject2?: InlineObject2, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject2 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {})
        : inlineObject2 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Updates the content or properties of the specified note: content(string) position(int x, int y) size(int w and int h) If the note does not exist, an error message is returned.
     * @summary Update Entry
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryPut: async (inlineObject1?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/entry`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      const needsSerialization =
        typeof inlineObject1 !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {})
        : inlineObject1 || '';

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * EntryManagementApi - functional programming interface
 * @export
 */
export const EntryManagementApiFp = function (configuration?: Configuration) {
  return {
    /**
     * read entries no params: entries created by current user only author: entries created by the author only url: entries related to the url author and url: entries related to the url and created by the author  get user self notes related to a url: userid as author, and url
     * @summary Read Entries
     * @param {string} [url]
     * @param {string} [author]
     * @param {number} [density]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entriesGet(
      url?: string,
      author?: string,
      density?: number,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await EntryManagementApiAxiosParamCreator(configuration).entriesGet(
        url,
        author,
        density,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Deletes the specified note logically and sets the note\'s isDeleted field to true. If the note does not exist, returns an error message.
     * @summary Delete Entry
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryDelete(
      inlineObject3?: InlineObject3,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
      const localVarAxiosArgs = await EntryManagementApiAxiosParamCreator(configuration).entryDelete(
        inlineObject3,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Create a new note.  The request body should contain: author:userId content: position: x and y size: w and h url.  If the creation is successful, the detailed information of the note is returned.
     * @summary Create a new sticker
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryPost(
      inlineObject2?: InlineObject2,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
      const localVarAxiosArgs = await EntryManagementApiAxiosParamCreator(configuration).entryPost(
        inlineObject2,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Updates the content or properties of the specified note: content(string) position(int x, int y) size(int w and int h) If the note does not exist, an error message is returned.
     * @summary Update Entry
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async entryPut(
      inlineObject1?: InlineObject1,
      options?: any,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
      const localVarAxiosArgs = await EntryManagementApiAxiosParamCreator(configuration).entryPut(
        inlineObject1,
        options,
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * EntryManagementApi - factory interface
 * @export
 */
export const EntryManagementApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     * read entries no params: entries created by current user only author: entries created by the author only url: entries related to the url author and url: entries related to the url and created by the author  get user self notes related to a url: userid as author, and url
     * @summary Read Entries
     * @param {string} [url]
     * @param {string} [author]
     * @param {number} [density]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entriesGet(url?: string, author?: string, density?: number, options?: any): AxiosPromise<Array<string>> {
      return EntryManagementApiFp(configuration)
        .entriesGet(url, author, density, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Deletes the specified note logically and sets the note\'s isDeleted field to true. If the note does not exist, returns an error message.
     * @summary Delete Entry
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryDelete(inlineObject3?: InlineObject3, options?: any): AxiosPromise<InlineResponse2004> {
      return EntryManagementApiFp(configuration)
        .entryDelete(inlineObject3, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Create a new note.  The request body should contain: author:userId content: position: x and y size: w and h url.  If the creation is successful, the detailed information of the note is returned.
     * @summary Create a new sticker
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryPost(inlineObject2?: InlineObject2, options?: any): AxiosPromise<InlineResponse2003> {
      return EntryManagementApiFp(configuration)
        .entryPost(inlineObject2, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Updates the content or properties of the specified note: content(string) position(int x, int y) size(int w and int h) If the note does not exist, an error message is returned.
     * @summary Update Entry
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    entryPut(inlineObject1?: InlineObject1, options?: any): AxiosPromise<InlineResponse2003> {
      return EntryManagementApiFp(configuration)
        .entryPut(inlineObject1, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * EntryManagementApi - object-oriented interface
 * @export
 * @class EntryManagementApi
 * @extends {BaseAPI}
 */
export class EntryManagementApi extends BaseAPI {
  /**
   * read entries no params: entries created by current user only author: entries created by the author only url: entries related to the url author and url: entries related to the url and created by the author  get user self notes related to a url: userid as author, and url
   * @summary Read Entries
   * @param {string} [url]
   * @param {string} [author]
   * @param {number} [density]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryManagementApi
   */
  public entriesGet(url?: string, author?: string, density?: number, options?: any) {
    return EntryManagementApiFp(this.configuration)
      .entriesGet(url, author, density, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Deletes the specified note logically and sets the note\'s isDeleted field to true. If the note does not exist, returns an error message.
   * @summary Delete Entry
   * @param {InlineObject3} [inlineObject3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryManagementApi
   */
  public entryDelete(inlineObject3?: InlineObject3, options?: any) {
    return EntryManagementApiFp(this.configuration)
      .entryDelete(inlineObject3, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Create a new note.  The request body should contain: author:userId content: position: x and y size: w and h url.  If the creation is successful, the detailed information of the note is returned.
   * @summary Create a new sticker
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryManagementApi
   */
  public entryPost(inlineObject2?: InlineObject2, options?: any) {
    return EntryManagementApiFp(this.configuration)
      .entryPost(inlineObject2, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Updates the content or properties of the specified note: content(string) position(int x, int y) size(int w and int h) If the note does not exist, an error message is returned.
   * @summary Update Entry
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EntryManagementApi
   */
  public entryPut(inlineObject1?: InlineObject1, options?: any) {
    return EntryManagementApiFp(this.configuration)
      .entryPut(inlineObject1, options)
      .then(request => request(this.axios, this.basePath));
  }
}
